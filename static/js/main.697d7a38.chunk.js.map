{"version":3,"sources":["firebase.js","constants/index.js","helpers/index.js","hooks/index.js","context/projects-context.js","context/selected-project-context.js","components/ProjectOverlay.js","components/TaskDate.js","components/AddTask.js","components/layout/header.js","components/IndividualProject.js","components/Projects.js","components/AddProject.js","components/layout/sidebar.js","components/Checkbox.js","components/Tasks.js","components/layout/content.js","index.js","App.js"],"names":["require","config","firebaseConfig","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","collatedTasks","key","name","collatedTasksExist","selectedProject","find","task","generatePushId","PUSH_CHARS","lastRandChars","now","Date","getTime","timeStampChars","Array","i","charAt","Math","floor","id","join","ProjectsContext","createContext","ProjectsProvider","children","useState","projects","setProjects","useEffect","firestore","collection","where","orderBy","get","then","snapshot","allProjects","docs","map","project","data","docId","JSON","stringify","useProjects","Provider","value","useProjectsValue","useContext","SelectedProjectContext","SelectedProjectProvider","setSelectedProject","useSelectedProjectValue","ProjectOverlay","setProject","showProjectOverlay","setShowProjectOverlay","className","data-testid","onClick","TaskDate","setTaskDate","showTaskDate","setShowTaskDate","moment","format","add","AddTask","showAddTaskMain","showShouldMain","showQuickAddTask","setShowQuickAddTask","setTask","taskDate","showMain","setShowMain","addTask","collatedDate","archived","date","userId","console","log","type","onChange","e","target","data-test-id","Header","darkMode","setDarkMode","shouldShowMain","setShouldShowMain","src","alt","IndividualProject","showConfirm","setShowConfirm","doc","delete","Projects","activeValue","active","setActive","data-doc-id","onKeyDown","AddProject","shouldShow","show","setShow","projectName","setProjectName","placeholder","Sidebar","showProjects","setShowProjects","undefined","Checkbox","update","archiveTask","Tasks","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","onSnapshot","newTasks","filter","diff","useTasks","length","getTitle","getCollatedTitle","document","title","Content","render","darkModeDefault","getElementById"],"mappings":"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","file":"static/js/main.697d7a38.chunk.js","sourcesContent":["// Firebase db connection.\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nrequire('dotenv').config();\n\nconst config_params = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n}\n\nconst firebaseConfig = firebase.initializeApp(config_params);\n\n//Change the export name\n// In the module we treat it as firebaseConfig because the firebase library calls it firebase\n// But when we export it to the app we are working on we call it firebase\nexport { firebaseConfig as firebase };","/**\n * Constants Module \n */\n\n\n\n\nexport const collatedTasks = [\n  { key: 'INBOX', name: 'Inbox' },\n  { key: 'TODAY', name: 'Today' },\n  { key: 'NEXT_7', name: 'Next 7 days' }\n]","/**\n * Helpers Module\n */\nimport { collatedTasks } from '../constants'\nimport { ProjectsContext } from '../context';\n\n/**\n * Function helper to check if the selectedProject is available.\n * @param {x} selectedProject \n */\nexport const collatedTasksExist = selectedProject => collatedTasks.find(task => task.key === selectedProject);\n\n/**\n * \n * @param {*} projects \n * @param {*} projectId \n */\nexport const getTitle = (projects, projectId) =>\n  projects.find(project => project.projectId === projectId);\n\n\n/**\n * \n * @param {*} projects \n * @param {*} key \n */\nexport const getCollatedTitle = (projects, key) =>\n  projects.find(project => project.key === key)\n\n\n\n/**\n * Generate an id.\n */\nexport const generatePushId = (() => {\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  const lastRandChars = [];\n\n  return function () {\n    let now = new Date().getTime();\n\n    const timeStampChars = new Array(8);\n    for (var i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      now = Math.floor(now / 64);\n    }\n\n    let id = timeStampChars.join('');\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    return id;\n  };\n})();","import { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { firebase } from '../firebase';\nimport { collatedTasksExist } from '../helpers';\n\n\n/**\n * UseTask function Hook. \n * - Function to get task data given a project.\n * - Global state for the tasks.\n * @param {int} selectedProject (Project to get tasks from)\n */\nexport const useTasks = (selectedProject) => {\n\n  // Tasks is the variable and set Tasks is the function that changes it\n  const [tasks, setTasks] = useState([]);\n\n  // Archived\n  const [archivedTasks, setArchivedTasks] = useState([]);\n\n  // Every time the selectedProject changes it runs. Update the data.\n  useEffect(() => {\n    // our tasks\n    let unsubscribe = firebase\n      .firestore()\n      .collection('tasks')\n      .where('userId', '==', 'asdfsadkjfnaskjdfbagl');\n\n    // depending on the selectedProject\n    // give me the tasks from the selected project\n\n    unsubscribe = selectedProject && !collatedTasksExist(selectedProject) // it doesn't exist in the collected tasks\n      ? (unsubscribe = unsubscribe.where('projectId', '==', selectedProject))\n      : selectedProject === 'TODAY'\n        ? (unsubscribe = unsubscribe.where('date', '==', moment().format('DD/MM/YYYY')))\n        : selectedProject === 'INBOX' || selectedProject === 0\n          ? (unsubscribe = unsubscribe.where('date', '==', ''))\n          : unsubscribe\n\n    unsubscribe = unsubscribe.onSnapshot(snapshot => {\n      const newTasks = snapshot.docs.map(task => ({\n        id: task.id,\n        ...task.data(),\n      }));\n\n\n      // Set\n      setTasks(\n        selectedProject === 'NEXT_7'\n          ? newTasks.filter(\n            task =>\n              moment(task.date, 'DD-MM-YYYY').diff(moment(), 'days') <= 7\n              && task.archived !== true\n          )\n          : newTasks.filter(task => task.archived !== true)\n      );\n\n      // set in the state.\n      setArchivedTasks(newTasks.filter(task => task.archived !== false)); // give me all true\n    });\n\n    return () => unsubscribe();\n  }, [selectedProject]); // Once it changes we run all above\n  // Only run it when it is selected a new project. \n\n  return { tasks, archivedTasks };\n};\n\n/**\n * UseProjects function Hook. \n * - Function to get task data from my user.\n * - Global state for the projects.\n */\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([]);\n\n  // Refresh when projects change.\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection('projects')\n      .where('userId', '==', 'asdfsadkjfnaskjdfbagl')\n      .orderBy('projectId')\n      .get()\n      .then(snapshot => {\n        const allProjects = snapshot.docs.map(project => ({\n          ...project.data(), // spread operator of data to concat with docId.\n          docId: project.id,\n        }));\n\n        // Needs the condition only set if they are different\n        if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n          setProjects(allProjects);\n        }\n      })\n  }, [projects]); // rerun when projects changes.\n\n  return { projects, setProjects }\n}","/**\n * Explaining context\n * \n * Provides a way not to pass data down the \n * react component tree without using props.\n * \n * You have a context without passing props.\n * \n */\nimport React, { createContext, useContext } from 'react';\nimport { useProjects } from '../hooks';\n\n// Provider - consumer\n// Provider top level \n// Consumer lower level\nexport const ProjectsContext = createContext();\n\n\n\n/**\n * Want to set the project when i am either:\n * - Adding new task\n * - through other layer\n * - Sidebar\n * \n * Using context \n */\nexport const ProjectsProvider = ({ children }) => {\n  // Custom hook.\n  // we use it to keep our projects syncronized with the database\n  // We use the context to be able to access them all over the app.\n  const { projects, setProjects } = useProjects(); // Custom hook with {}\n\n  return (\n    <ProjectsContext.Provider value={{ projects, setProjects }}>\n      {children}\n    </ProjectsContext.Provider>\n  );\n};\n\n// Function to get the projects data\nexport const useProjectsValue = () => useContext(ProjectsContext);\n\n\n\n\n\n\n","import React, { createContext, useContext, useState } from 'react';\n\n// Context\nexport const SelectedProjectContext = createContext();\n\n\n// Component Wrapper\nexport const SelectedProjectProvider = ({ children }) => {\n\n  // By default INBOX is the selectedProject.\n  // It is not a hook beacuse it doesn't depend on the outside (Firebase)\n  // Just SPA data about the selected project to have it all over the data.\n  const [selectedProject, setSelectedProject] = useState('INBOX'); // Not custom hook, []\n\n  return (\n    <SelectedProjectContext.Provider\n      value={{ selectedProject, setSelectedProject }}\n    >\n      {children}\n    </SelectedProjectContext.Provider>\n  );\n};\n\n// Component JFX\n// Function to get the projects data\n// USE this function will give use access to the context\n// We have access to the values of the context\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext);\n\n\n\n\n\n\n","import React from 'react';\nimport { useProjectsValue } from '../context';\n\nexport const ProjectOverlay = ({ setProject, showProjectOverlay, setShowProjectOverlay }) => {\n  const { projects } = useProjectsValue();\n\n  return (\n    projects && showProjectOverlay && (\n      <div className=\"project-overlay\" data-testid=\"project-overlay\">\n        <ul className=\"project-overlay__list\">\n          {projects.map(project => (\n            <li\n              key={project.projectId}\n              data-testid=\"project-overlay__list\"\n              onClick={() => {\n                setProject(project.projectId); // new project\n                setShowProjectOverlay(false); // hide it \n              }}\n            >\n              {project.name}\n            </li>\n          ))}\n\n        </ul>\n      </div>\n    )\n  )\n}","import React from 'react';\nimport { FaSpaceShuttle, FaSun, FaRegPaperPlane } from 'react-icons/fa';\nimport moment from 'moment';\n\nexport const TaskDate = ({ setTaskDate, showTaskDate, setShowTaskDate }) => {\n\n  return (\n    showTaskDate && (\n      <div className=\"task-date\" data-testid=\"task-date-overlay\">\n        <ul className=\"task-date__list\">\n          <li\n            onClick={() => {\n              setShowTaskDate(false);\n              setTaskDate(moment().format('DD/MM/YYYY'));\n            }}\n            data-testid=\"task-date-overlay\">\n            <span>\n              <FaSpaceShuttle />\n            </span>\n            <span>\n              Today\n            </span>\n          </li>\n          <li\n            onClick={() => {\n              setShowTaskDate(false);\n              setTaskDate(moment().add(1, 'day').format('DD/MM/YYYY'));\n            }}\n            data-testid=\"task-date-tomorrow\">\n            <span>\n              <FaSun />\n            </span>\n            <span>\n              Tomorrow\n              </span>\n          </li>\n          <li\n            onClick={() => {\n              setShowTaskDate(false);\n              setTaskDate(moment().add(7, 'day').format('DD/MM/YYYY'));\n            }}\n            data-testid=\"task-date-tomorrow\">\n            <span>\n              <FaRegPaperPlane />\n            </span>\n            <span>\n              Next week\n            </span>\n          </li>\n        </ul>\n      </div >\n    )\n  )\n}","import React, { useState } from \"react\";\nimport { FaRegListAlt, FaRegCalendarAlt } from 'react-icons/fa';\nimport moment from 'moment';\nimport { firebase } from '../firebase';\nimport { useSelectedProjectValue } from '../context';\nimport { ProjectOverlay } from \"./ProjectOverlay\";\nimport { TaskDate } from \"./TaskDate\";\n\n\nexport const AddTask = ({\n  showAddTaskMain = true, // main task\n  showShouldMain = false,\n  showQuickAddTask, // header task\n  setShowQuickAddTask\n}) => {\n\n  const [task, setTask] = useState('');\n  const [taskDate, setTaskDate] = useState('');\n  const [project, setProject] = useState('');\n  const [showMain, setShowMain] = useState(showShouldMain);\n  const [showProjectOverlay, setShowProjectOverlay] = useState(false);\n  const [showTaskDate, setShowTaskDate] = useState(false);\n\n  const { selectedProject } = useSelectedProjectValue();\n  const addTask = () => {\n    // project is the selected  by the project overlay. \n    // selectedProject is the one at the top of the list. \n    const projectId = project || selectedProject;\n    let collatedDate = '';\n    if (projectId === 'TODAY') {\n      collatedDate = moment().format('DD/MM/YYYY');\n    } else if (projectId === 'NEXT_7') {\n      collatedDate = moment()\n        .add(7, 'days')\n        .format('DD/MM/YYYY');\n    }\n    return (\n      task &&\n      projectId &&\n      firebase\n        .firestore()\n        .collection('tasks')\n        .add({\n          archived: false,\n          projectId, // it is the same as projectId : projectId\n          task, // it is the same as task : task\n          date: collatedDate || taskDate,\n          userId: 'asdfsadkjfnaskjdfbagl'\n        })\n        .then(() => {\n          setTask('');\n          setProject('')\n          setShowMain('');\n          setShowProjectOverlay(false);\n        })\n    )\n  }\n  console.log((showMain || showQuickAddTask));\n  return (\n    <div\n      className={showQuickAddTask ? 'add-task add-task__overlay' : 'add-task'}\n      data-testid=\"add-task-comp\"\n    >\n      {showAddTaskMain && (\n        <div\n          className=\"add-task__shallow\"\n          data-testid=\"show-main-action\"\n          onClick={() => setShowMain(!showMain)}\n        >\n          <span className=\"add-task__plus\">+</span>\n          <span className=\"add-task__text\">Add Task</span>\n        </div>\n      )}\n\n      {(showMain || showQuickAddTask) && (\n        <div className=\"add-task__main\" data-testid=\"add-task-main\">\n          {showQuickAddTask && (\n            <>\n              <div data-testid=\"quick-add-task\">\n                <h2 className=\"header\">Quick Add Task</h2>\n                <span\n                  className=\"add-task__cancel-x\"\n                  data-testid=\"add-task-quick-cancel\"\n                  onClick={() => {\n                    setShowMain(false);\n                    setShowProjectOverlay(false);\n                    setShowQuickAddTask(false);\n                  }}\n                >\n                  X\n                </span>\n              </div>\n            </>\n          )}\n\n          <ProjectOverlay\n            setProject={setProject}\n            showProjectOverlay={showProjectOverlay}\n            setShowProjectOverlay={setShowProjectOverlay} />\n\n          <TaskDate\n            setTaskDate={setTaskDate}\n            showTaskDate={showTaskDate}\n            setShowTaskDate={setShowTaskDate} />\n\n          <input\n            className=\"add-task__content\"\n            data-testid=\"add-task-content\"\n            type=\"text\"\n            value={task}\n            onChange={e => setTask(e.target.value)} // set Task data\n          />\n          <button\n            type=\"button\"\n            className=\"add-task__submit\"\n            data-testid=\"add-task\"\n            onClick={() => showQuickAddTask\n              ? addTask() && setShowQuickAddTask(false)\n              : addTask()}>\n            AddTask\n          </button>\n\n          {!showQuickAddTask && (\n            <span className=\"add-task__cancel\"\n              data-testid=\"add-task-main-cancel\"\n              onClick={() => {\n                setShowMain(false);\n                setShowProjectOverlay(false);\n              }}\n            >\n              Cancel\n        </span>\n          )}\n\n          {/* OVerlay buttons */}\n          <span\n            className=\"add-task__project\"\n            data-test-id=\"show-project-overlay\"\n            onClick={() => setShowProjectOverlay(!showProjectOverlay)}\n          >\n            <FaRegListAlt></FaRegListAlt>\n          </span>\n          <span\n            className=\"add-task__date\"\n            data-testid=\"show-task-date-overlay\"\n            onClick={() => setShowTaskDate(!showTaskDate)}\n          >\n            <FaRegCalendarAlt></FaRegCalendarAlt>\n          </span>\n        </div>\n      )\n      }\n    </div >\n  );\n}","// App header\nimport React, { useState } from 'react';\nimport { FaPizzaSlice } from 'react-icons/fa/';\nimport { AddTask } from '../AddTask';\n/**\n * Header\n */\nexport const Header = ({ darkMode, setDarkMode }) => {\n  const [shouldShowMain, setShouldShowMain] = useState(false);\n  const [showQuickAddTask, setShowQuickAddTask] = useState(false);\n\n  return (\n    <header className=\"header\" data-testid=\"header\">\n      <nav>\n        <div className=\"logo\">\n          <img src=\"/images/logo.png\" alt=\"Todoist\"></img>\n        </div>\n        <div className=\"settings\">\n          <ul>\n            <li\n              data-testid=\"quick-add-task-action\"\n              className=\"settings__add\"\n              onClick={() => {\n                setShowQuickAddTask(true);\n                setShouldShowMain(true);\n              }}>\n              +\n            </li>\n            <li\n              data-testid=\"dark-mode-action\"\n              onClick={() => setDarkMode(!darkMode)}>\n              <FaPizzaSlice />\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n      <AddTask\n        showAddTaskMain={false}\n        shouldShowMain={shouldShowMain}\n        showQuickAddTask={showQuickAddTask}\n        setShowQuickAddTask={setShowQuickAddTask}\n      />\n    </header>\n  );\n}\n","\nimport React, { useState } from 'react';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport { useProjectsValue, useSelectedProjectValue } from '../context';\nimport { firebase } from '../firebase';\n\n\nexport const IndividualProject = ({ project }) => {\n  // Show confirm is the state to open or not the Confimation Modal.\n  const [showConfirm, setShowConfirm] = useState(false);\n  const { projects, setProjects } = useProjectsValue();\n  const { setSelectedProject } = useSelectedProjectValue();\n\n  const deleteProject = docId => {\n    firebase\n      .firestore()\n      .collection('projects')\n      .doc(docId)\n      .delete()\n      .then(() => {\n        // After deleting the project we set\n        setProjects([...projects]);\n        setSelectedProject('INBOX'); // set selected projects to the INBOX.\n      })\n  }\n\n  return (\n    <>\n      <span className=\"sidebar__dot\">•</span>\n      <span className=\"sidebar__project-name\">{project.name}</span>\n      <span\n        className=\"sidebar__project-delete\"\n        data-testid=\"delete-project\"\n        onClick={() => {\n          //Oposite of showConfirm\n          setShowConfirm(!showConfirm)\n        }}\n      >\n        <FaTrashAlt />\n        {showConfirm && (\n          <div className=\"project-delete-modal\">\n            <div className=\"project-delete-modal__inner\">\n              <p>Are you sure you wawnt to delete this project?</p>\n              <button\n                type=\"button\"\n                onClick={() => deleteProject(project.docId)}>\n                Delete\n              </button>\n              <span onClick={() => setShowConfirm(!showConfirm)}>Cancel</span>\n            </div>\n          </div>\n        )}\n      </span>\n    </>\n  )\n}","import React, { useState } from 'react';\n\nimport { useSelectedProjectValue, useProjectsValue } from '../context';\nimport { IndividualProject } from './IndividualProject';\n\nexport const Projects = ({ activeValue = null }) => {\n  const [active, setActive] = useState(activeValue);\n  const { setSelectedProject } = useSelectedProjectValue();\n  const { projects } = useProjectsValue();\n\n  // check if projects exist\n  return (\n    projects &&\n    projects.map(project => (\n      <li\n        key={project.docId}\n        data-doc-id={project.docId}\n        data-testid=\"project-action\"\n        className={\n          active === project.projectId\n            ? 'active sidebar__project'\n            : 'sidebar__project'\n        }\n        onKeyDown={() => {\n          setActive(project.projectId);\n          setSelectedProject(project.projectId);\n        }}\n        onClick={() => {\n          setActive(project.projectId);\n          setSelectedProject(project.projectId);\n        }}\n      >\n        <IndividualProject project={project}></IndividualProject>\n      </li >\n    ))\n  );\n};","import React, { useState } from 'react';\nimport { firebase } from '../firebase';\nimport { generatePushId } from '../helpers';\nimport { useProjectsValue } from '../context';\n\n// By defaut we don't show it. \nexport const AddProject = ({ shouldShow = false }) => {\n  const [show, setShow] = useState(shouldShow);\n  const [projectName, setProjectName] = useState('');\n\n  const projectId = generatePushId();\n  const { projects, setProjects } = useProjectsValue(); // To update our state\n\n  const addProject = () =>\n    projectName &&\n    firebase\n      .firestore()\n      .collection('projects')\n      .add({\n        projectId,\n        name: projectName,\n        userId: 'asdfsadkjfnaskjdfbagl'\n      })\n      .then(() => {\n        //After we created a new project \n        setProjects([...projects]);\n        setProjectName('');\n        setShow(false);\n      })\n\n  return (\n    <div className=\"add-project\" data-testid=\"add-project\">\n      {show && (\n        <div className=\"add-project__input\">\n          <input\n            value={projectName}\n            onChange={e => setProjectName(e.target.value)}\n            className=\"add-project__name\"\n            data-testid=\"project-name\"\n            type=\"text\"\n            placeholder=\"Name your project\"\n          />\n          <button\n            className=\"add-project__submit\"\n            type=\"button\"\n            onClick={() => addProject()}\n            data-testid=\"add-project-submit\"\n          >\n            Add Project\n            </button>\n          <span\n            data-testid=\"hide-project-overlay\"\n            className=\"add-project__cancel\"\n            onClick={() => setShow(false)}\n          >\n            Cancel\n            </span>\n        </div>\n      )}\n\n      <span className=\"add-project__plus\">+</span>\n      <span data-testid=\"add-project-action\"\n        className=\"add-project__text\"\n        onClick={() => setShow(!show)}\n      >\n        Add Project\n      </span>\n    </div>\n  )\n}\n\n","import React, { useState } from 'react';\nimport {\n  FaChevronDown,\n  FaInbox,\n  FaRegCalendarAlt,\n  FaRegCalendar\n} from 'react-icons/fa';\n\nimport { useSelectedProjectValue } from '../../context';\n\nimport { Projects } from '../Projects';\nimport { AddProject } from '../AddProject';\n/**\n * Application Sidebar.\n */\nexport const Sidebar = () => {\n\n  const { setSelectedProject } = useSelectedProjectValue();\n  const [active, setActive] = useState('inbox');\n  const [showProjects, setShowProjects] = useState(true);\n\n  return (\n    <div className=\"sidebar\" data-testid=\"sidebar\">\n      <ul className=\"sidebar__generic\">\n        <li\n          data-testid=\"inbox\"\n          className={active === 'inbox' ? 'active' : undefined}\n          onClick={() => {\n            setActive('inbox');\n            setSelectedProject('INBOX');\n          }}\n        >\n          <span><FaInbox></FaInbox></span>\n          <span>Inbox</span>\n        </li>\n        <li\n          data-testid=\"today\"\n          className={active === 'today' ? 'active' : undefined}\n          onClick={() => {\n            setActive('today');\n            setSelectedProject('TODAY');\n          }}\n        >\n          <span><FaRegCalendar></FaRegCalendar></span>\n          <span>Today</span>\n        </li>\n        <li\n          data-testid=\"next_7\"\n          className={active === 'next_7' ? 'active' : undefined}\n          onClick={() => {\n            setActive('next_7');\n            setSelectedProject('NEXT_7');\n          }}\n        >\n          <span><FaRegCalendarAlt></FaRegCalendarAlt></span>\n          <span>Next 7 day</span>\n        </li>\n      </ul>\n\n      <div className=\"sidebar__middle\" onClick={() => setShowProjects(!showProjects)}>\n        <span>\n          {/* When show projects is false we add the hidden-projects class */}\n          <FaChevronDown className={!showProjects ? 'hidden-projects' : undefined}></FaChevronDown>\n        </span>\n\n        <h2>Projects</h2>\n      </div>\n      <ul className=\"sidebar__projects\">{showProjects && <Projects />}</ul>\n      {showProjects && <AddProject />}\n    </div>\n  )\n}","// Checkbox\nimport React from 'react';\n// Import my firebase configuration.\nimport { firebase } from '../firebase';\n\nexport const Checkbox = ({ id }) => {\n\n\n  /**\n   * Archive a task function.\n   */\n  const archiveTask = (id) => {\n    firebase\n      .firestore()\n      .collection('tasks')\n      .doc(id)\n      .update({\n        archived: true\n      })\n  };\n\n  return (\n    <div className=\"checkbox-holder\" data-testid=\"checkbox-action\"\n      onClick={() => archiveTask(id)}>\n      <span className=\"checkbox\"></span>\n    </div>\n  );\n}","// Tasks\nimport React, { useEffect } from 'react';\nimport { Checkbox } from './Checkbox';\nimport { AddTask } from './AddTask';\nimport { useTasks } from '../hooks';\nimport { collatedTasks } from '../constants';\nimport { getTitle, getCollatedTitle, collatedTasksExist } from '../helpers';\nimport { useSelectedProjectValue, useProjectsValue } from '../context';\n\n\nexport const Tasks = () => {\n\n  // When project is selected in sidebar. it will change here\n  const { selectedProject } = useSelectedProjectValue();\n  const { projects } = useProjectsValue();\n  const { tasks } = useTasks(selectedProject);\n\n\n  // Projectname changes with the selectedProject.\n  let projectName = '';\n\n  if (projects && projects.length > 0 && selectedProject && !collatedTasksExist(selectedProject)) {\n    projectName = getTitle(projects, selectedProject).name;\n  }\n\n  if (collatedTasksExist(selectedProject) && selectedProject) {\n    projectName = getCollatedTitle(collatedTasks, selectedProject).name;\n  }\n\n  useEffect(() => {\n    document.title = `${projectName}: Todoist`;\n  }, []);\n\n  return (\n    <div className=\"tasks\" data-testid=\"tasks\">\n      <h2 data-testid=\"project-name\">{projectName}</h2>\n\n\n      <ul className=\"tasks__list\">\n        {tasks.map(task => (\n          <li key={`${task.id}`}>\n            <Checkbox id={task.id} />\n            <span>{task.task}</span>\n          </li>\n        ))}\n      </ul>\n\n      <AddTask></AddTask>\n    </div >\n  )\n}","// App content\nimport React from 'react';\nimport { Sidebar } from './sidebar';\nimport { Tasks } from '../Tasks'\n\nexport const Content = () => {\n  return (\n    <section className=\"content\">\n      <Sidebar />\n      <Tasks />\n    </section>\n  )\n}","// Entry point for the application.\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\n\nrender(<App />, document.getElementById('root'));\n","import React, { useState } from 'react';\nimport { Header } from './components/layout/header';\nimport { Content } from './components/layout/content';\nimport { ProjectsProvider, SelectedProjectProvider } from './context';\nimport './App.scss';\n\n\n// Name exports\nexport const App = ({ darkModeDefault = false }) => {\n\n  const [darkMode, setDarkMode] = useState(darkModeDefault);\n\n  return (\n    <SelectedProjectProvider>\n      <ProjectsProvider>\n        <main\n          data-testid=\"application\"\n          className={darkMode ? 'darkmode' : undefined}>\n          <Header darkMode={darkMode} setDarkMode={setDarkMode} />\n          <Content />\n        </main>\n      </ProjectsProvider>\n    </SelectedProjectProvider>\n  )\n};\n\n"],"sourceRoot":""}